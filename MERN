BACKEND CONFIGURATION
You have to launch your EC2 on AWS and then connect it to your terminal
After connecting, we update the ubuntu OS, sudo apt update, then we do sudo apt upgrade.
Both the update and upgrade will  download the OS apps, but one will update and keep the latest version.
After that you get the location of the node.js software
curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -

INSTALL THE NODE.JS on the server
You install with sudo apt-get install -y nodejs (-y is for yes where required)
The command installs both nodejs and the npm, npm is a package manager for node.
We can confirm out installation by using node -v

APPLICATION CODE SETUP
Then we create a directory mkdir Todo
ls to confirm the directory, the we cd Todo 
While in Todo, we initiate npm init, this creates the package.json in our Todo file, enter as you see, then add description and then enter on, the keyword, todo application,
the author should be daniel and the enter and select yes.

INSTALL EXPRESSJS
The next step we install expressJs
npm install express
Then create an index.js file
touch index.js
After that we install the dotenv module
npm install dotenv
We then open the index.js file to add things into it. vim index.js

const express = require('express');
require('dotenv').config();

const app = express();

const port =process.env.PORT || 5000;

app.use((req, res, next) => {
	res.header("Access-Control-Allow-Origin", "\*");
	res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
next();
});

app.use((req, res, next) => {
	res.send('Welcome to Express');
});

app.listen(port, () => {
	console.log(Server running on port ${port})
});
We can check if it is running by using node indx.js
We go ahead to set an inbound rule for port 5000 because we specified it in our index.js.
To do that, we go to our security group on the instance we are using, and then we set an inbound rule on port 5000 
And then we get our public IP to see if we are up and running 13.49.69.100:5000

CREATE A ROUTE
Creaye a directory mkdir routes
Then cd into routes cd routes
Then we create a file touch api.js
Open the file with vim api.js and then insert

const express = require ('express');
const router = express.Router();

router.get('/todos', (req, res, next) => {

});

router.post('/todos', (req, res, next) => {

});

router.delete('/todos/:id', (req, res, next) => {

})

module.exports = router;

MODELS USING MONGODB
Change the directory back to Todo with cd ..
and then install mongoose npm install mongoose, afterwards we create a directory, we cd into the directory and create a file also.
mkdir models && cd models && touch todo.js
type the below code inside todo.js

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

//create schema for todo
const TodoSchema = new Schema({
	action: {
		type:String,
		required: [true, The todo text field is required]
	}
})

//create model for todo
const Todo = mongoose.model(todo, TodoSchema);

module.exports = Todo;

After that we have to cd back to our routes to edit our api.js
cd ..
cd routes
vim api.js
replace the code in our api.js with

const express = require ('express');
const router = express.Router();
const Todo = require('../models/todo');

router.get('/todos', (req, res, next) => {

//this will return all the data, exposing only the id and action field to the client
Todo.find({}, 'action')
.then(data => res.json(data))
.catch(next)
});

router.post('/todos', (req, res, next) => {
if(req.body.action){
Todo.create(req.body)
.then(data => res.json(data))
.catch(next)
}else {
	res.json({
		error: "The input field is empty"
	})
}
});

router.delete('/todos/:id', (req, res, next) => {
Todo.findOneAndDelete({"_id": req.params.id})
.then(data => res.json(data))
.catch(next)
})

module.exports = router;

And then we need to open a database
Go to https://cloud.mongodb.com and then create an account.
After creating an account, we create a cluster which would be a shared free tier account, and it should also be a aws cluster.
Once the cluster is created, you go to the security and add database access, and then network access, you should select allow from anywhere.
Then you go back to your cluster and click collections, and then create a database.

After that we go back to our terminal and then cd into Todo and touch .env
mongodb+srv://<username>:<password>@cluster0.kwfnx.mongodb.net/?retryWrites=true&w=majority we got this from our mongodb site, you have to choose your cluster
and then connect, then you choose connect to your application.
In that code, we replace it with our username and our password for the database you created.
We have to go back to our terminal to edit our index.js in Todo directory

const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const routes = require('./routes/api');
const path = require('path');
require('dotenv').config();

const app = express();

const port =process.env.PORT || 5000;

//connect to the database
mongoose.connect(process.env.DB, { useNewUrlParser: true })
.then(() => console.log(Database connected successfully))
.catch(err => console.log(err));

//since mongoose promise is deprecated, we overide it with node's promise
mongoose.Promise = global.Promise;

app.use((req, res, next) => {
	res.header("Access-Control-Allow-Origin", "\*");
	res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
next();
});

app.use(bodyParser.json());

app.use('/api', routes);

app.use((err, req, res, next) => {
	console.log(err);
	next();
});

app.listen(port, () => {
	console.log(Server running on port ${port})
});
Then run the node index.js
You may get an EARRDINUSE error, what we need to do is get the ID of the process using the port and kill it manually.
lsof -i tcp:5000
Get the PID of the process and kill, kill -9 887
run the node index.js again

For the next step we need postman application to connect to the api, you can download and install the application.
And can also skip creating an account, after that, you create a request, change it to POST, click on headers, in the KEY field, add CONTENT-TYPE
, in the value field, application/json
Go to the body and create an acction
{
    "action" : "Working on project 3" 
}
